// routes/options.js
const express = require("express");
const router = express.Router();
const supabase = require("../supabaseClient");

// --- üöÄ Endpoint ‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á MasterOptions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ---
router.get("/all", async (req, res) => {
  console.log("üöö GET /api/options/all - Fetching all master options...");
  try {
    const groups = ["status", "fixing", "posible", "document", "presenter"];

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å Database
    const promises = groups.map((group) =>
      supabase
        .from("MasterOptions")
        .select("option_id, option_label, display_order")
        .eq("option_group", group) // ‡πÉ‡∏ä‡πâ eq ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        .eq("is_active", true)
        .order("display_order", { ascending: true })
    );

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Promise ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏¢‡∏¥‡∏á‡πÑ‡∏õ‡∏´‡∏≤ DB ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
    const results = await Promise.all(promises);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ error ‡∏à‡∏≤‡∏Å Supabase ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const firstErrorResult = results.find((result) => result.error);
    if (firstErrorResult) {
      throw firstErrorResult.error;
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ object ‡∏ó‡∏µ‡πà frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const allOptions = {};
    groups.forEach((group, index) => {
      allOptions[group] = results[index].data;
    });

    res.status(200).json(allOptions);
  } catch (error) {
    console.error("Error fetching all master options:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// --- GET: MasterOptions by group ---
router.get("/", async (req, res) => {
  const group = req.query.group;

  console.log("üîç option group = ", group);

  if (!group) return res.status(400).json({ error: "Missing option group" });

  try {
    const { data, error } = await supabase
      .from("MasterOptions")
      .select("option_id, option_label, display_order")
      .ilike("option_group", group) // ‚úÖ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ
      .eq("is_active", true)
      .order("display_order", { ascending: true });

    if (error) throw error;

    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
